<UserControl x:Class="AntiPlagiarism.Vsix.ToolWindows.AntiPlagiarismWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:platformUI="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:local="clr-namespace:AntiPlagiarism.Vsix.ToolWindows"
             xmlns:converters="clr-namespace:AntiPlagiarism.Vsix.ToolWindows.Converters"
            
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="1000"
             d:DataContext="{d:DesignInstance Type=local:AntiPlagiarismWindowViewModel, IsDesignTimeCreatable=True}"
             Background="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"
             Foreground="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Themes/Styles.xaml"/>

                <ResourceDictionary>
                    <!--Converters-->
                    <converters:BoolInversionConverter x:Key="boolInversionConverter"/>
                    <converters:BoolToVisibilityConverter x:Key="visibilityConverter"/>

                    <!-- Buttons Style-->                                                     
                    <Style x:Key="toolbarButtonStyle" TargetType="Button" BasedOn="{StaticResource vsButtonStyle}">
                        <Setter Property="Padding" Value="4,2,4,2"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="5,2,0,2"/>
                        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                        <Setter Property="MaxWidth" Value="30"/>
                        <Setter Property="MinWidth" Value="30"/>
                    </Style>

                    <!-- Image Style-->
                    <Style TargetType="Image" BasedOn="{StaticResource vsImageStyle}"/>

                    <Style x:Key="datagridCellStyle" TargetType="DataGridCell">
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                        <EventSetter Event="MouseDoubleClick" Handler="DataGridCell_MouseDoubleClick"/>
                    </Style>
                    
                    <!--Data Grid Cell Text Block Style-->
                    <Style x:Key="cellTextBlockStyle" TargetType="TextBlock">
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="ToolTip" 
                                Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Text, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                        <Setter Property="Margin" Value="2,0"/>
                    </Style>

                    <!--Data Grid Row Details GroupBox Style-->
                    <Style x:Key="dataGridRowDetailsGroupBoxStyle" TargetType="GroupBox">
                        <Style.Resources>
                            <Style TargetType="{x:Type Border}">
                                <Setter Property="CornerRadius" Value="3"/>
                            </Style>
                        </Style.Resources>

                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="Margin" Value="2"/>
                        <Setter Property="BorderThickness" Value="1"/>
                    </Style>
                </ResourceDictionary>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>
    <UserControl.DataContext>
        <local:AntiPlagiarismWindowViewModel/>
    </UserControl.DataContext>
    <Grid>
        <Grid.Resources>
            <!--HACK - DataGridColumn isn't actually an element of VIsual Tree, it's not connected to DataGrid's data context and doesn't work with Visibility property.
                We need proxy element to connect column to context
                https://stackoverflow.com/questions/7660967/wpf-error-cannot-find-governing-frameworkelement-for-target-element-->
            <FrameworkElement x:Key="proxyElement" DataContext="{Binding}"/>
        </Grid.Resources>
        
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!--HACK ProxyElement must be hosted as a Content into an invisible ContentControl with the same DataContext.-->
        <ContentControl Grid.Row="0" Visibility="Collapsed" Content="{StaticResource proxyElement}"/>

        <Border Grid.Row="0" BorderThickness="1" CornerRadius="3" Margin="2,4"
                BorderBrush="{DynamicResource {x:Static platformUI:EnvironmentColors.BrandedUIBorderBrushKey}}">
            <WrapPanel Orientation="Horizontal">
                <ToggleButton x:FieldModifier="private" x:Name="settingsButton" ToolTip="Expand Setting" Margin="5,5,0,5" VerticalAlignment="Center"
                              IsChecked="True" Style="{StaticResource vsToggleButtonStyle}">
                    <StackPanel Orientation="Horizontal">
                        <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/Settings.ico"/>
                        <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/ExpandDown.ico"
                               Visibility="{Binding ElementName=settingsButton, Path=IsChecked, Converter={StaticResource visibilityConverter}, 
                                                    ConverterParameter=!}"/>
                        <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/CollapseUp.ico"
                               Visibility="{Binding ElementName=settingsButton, Path=IsChecked,Converter={StaticResource visibilityConverter}}"/>
                    </StackPanel>
                </ToggleButton>
                
                <StackPanel Orientation="Horizontal" 
                            IsEnabled="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, 
                                                Converter={StaticResource boolInversionConverter}}">
                    <TextBlock Text="Threshhold:" Margin="10,2,0,2" VerticalAlignment="Center"/>
                    <TextBox Text="{Binding Path=ThreshholdPercent, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                                            StringFormat={}{0:F1}, ValidatesOnExceptions=True}"
                             TextAlignment="Center" Margin="10,2,0,2" MinWidth="50" MaxWidth="50" VerticalAlignment="Center"/>
                    <TextBlock Text="%" Margin="2,2,0,2" VerticalAlignment="Center"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" 
                            IsEnabled="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, 
                                                Converter={StaticResource boolInversionConverter}}">
                    <TextBlock Text="Min. Method Size:" Margin="10,2,0,2" VerticalAlignment="Center" TextAlignment="Center"/>
                    <TextBox Text="{Binding Path=MinCheckedMethodSize, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                                            ValidatesOnExceptions=True}"
                             TextAlignment="Center" Margin="10,2,0,2" MinWidth="50" MaxWidth="50" VerticalAlignment="Center"
                             MaxLength="4"/>
                </StackPanel>

                <StackPanel Orientation="Horizontal" 
                            IsEnabled="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                Converter={StaticResource boolInversionConverter}}">
                    <TextBlock Text="Reference Solution:" Margin="10,2,0,2" VerticalAlignment="Center"/>
                    <TextBox Text="{Binding Path=ReferenceSolutionPath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                             Margin="10,2,0,2" IsReadOnly="True" MinWidth="300" MaxWidth="300" VerticalAlignment="Center"
                             ToolTip="{Binding Path=ReferenceSolutionPath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                    <Button ToolTip="Open Reference Solution"  Command="{Binding Path=OpenReferenceSolutionCommand}"
                            Style="{StaticResource toolbarButtonStyle}">
                        <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/OpenFolder.ico"/>
                    </Button>
                </StackPanel>
                <StackPanel Orientation="Horizontal">
                    <Button ToolTip="Run Anti-Plagiator" Command="{Binding Path=RunAnalysisCommand}">
                        <Button.Style>
                            <Style TargetType="Button" BasedOn="{StaticResource toolbarButtonStyle}">
                                <Setter Property="IsEnabled" Value="True"/>

                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Path=ReferenceSolutionPath, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                                 Value="{x:Null}">
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Button.Style>

                        <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/Run.ico"/>
                    </Button>

                    <Button ToolTip="Cancel analysis" Command="{Binding Path=CancelAnalysisCommand}" Style="{StaticResource toolbarButtonStyle}"
                            IsEnabled="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                            Visibility="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                Converter={StaticResource visibilityConverter}}">
                        <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/Cancel.ico"/>
                    </Button>

                    <ProgressBar MinWidth="100" Margin="10,5,0,5"
                                 Visibility="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                      Converter={StaticResource visibilityConverter}}"                          
                                 IsIndeterminate="{Binding Path=IsAnalysisRunning, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                </StackPanel>
            </WrapPanel>
        </Border>

        <Grid Grid.Row="1">
            <Grid.Style>
                <Style TargetType="Grid">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=settingsButton, Path=IsChecked, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                     Value="False">
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Grid.Style>
            
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Button Grid.Column="0" Style="{StaticResource toolbarButtonStyle}" ToolTip="Columns Visibility" Padding="0" Background="Transparent"
                    BorderThickness="0" Margin="2,5,0,5" ContextMenuService.IsEnabled="False"
                    Click="ColumnsVisibilityButton_Click">
                <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/ColumnSettings.ico"
                       MaxHeight="20" MaxWidth="20"/>
                <Button.ContextMenu>
                    <ContextMenu Placement="Bottom" ItemsSource="{Binding Path=ColumnsVisibilityCollectionViewModel.Columns}">
                        <ContextMenu.ItemContainerStyle>
                            <Style TargetType="{x:Type MenuItem}">
                                <Setter Property="IsCheckable" Value="True"/>
                                <Setter Property="StaysOpenOnClick" Value="True"/>
                                <Setter Property="IsChecked" Value="{Binding Path=IsVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Setter Property="Header" Value="{Binding Path=ColumnName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                            </Style>
                        </ContextMenu.ItemContainerStyle>
                    </ContextMenu>
                </Button.ContextMenu>
            </Button>

            <ToggleButton x:FieldModifier="private" x:Name="gridRowVisibilityToggleButton"
                          Grid.Column="1" Margin="2,5,0,5">
                <ToggleButton.Style>
                    <Style TargetType="ToggleButton" BasedOn="{StaticResource vsToggleButtonStyle}">
                        <Setter Property="ToolTip" Value="Show all rows in the grid. Click to show only rows which exceed threshold"/>

                        <Style.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="ToolTip" Value="Show only rows which exceed threshold in the grid. Click to show all rows"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ToggleButton.Style>
                <Image MaxHeight="18" MaxWidth="18">
                    <Image.Style>
                        <Style TargetType="Image" BasedOn="{StaticResource vsImageStyle}">
                            <Setter Property="Source" 
                                    Value="pack://application:,,,/AntiPlagiarism;component/Resources/StatusInformation.ico"/>

                            <Style.Triggers>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}, 
                                                               Path=IsChecked, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                             Value="True">
                                    <Setter Property="Source" 
                                            Value="pack://application:,,,/AntiPlagiarism;component/Resources/StatusInvalid.ico"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </ToggleButton>
        </Grid>

        <DataGrid Grid.Row="2" Style="{StaticResource readonlyDataGridStyle}" CellStyle="{StaticResource datagridCellStyle}"          
                  ItemsSource="{Binding Path=PlagiatedItems, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  SelectedItem="{Binding Path=SelectedItem, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  Initialized="DataGrid_Initialized">
            <DataGrid.RowStyle>
                <Style TargetType="DataGridRow" BasedOn="{StaticResource dataGridRowStyle}">
                    <Setter Property="DetailsVisibility" 
                            Value="{Binding Path=AreCodeFragmentsVisible, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, 
                                            Converter={StaticResource visibilityConverter}}"/>
                    <Setter Property="ContextMenu">
                        <Setter.Value>
                            <ContextMenu>
                                <MenuItem Command="{Binding Path=ShowOrHideCodeCommand, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}">
                                    <MenuItem.Style>
                                        <Style TargetType="MenuItem">
                                            <Setter Property="Header" Value="Show Code"/>

                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=AreCodeFragmentsVisible, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                                    <Setter Property="Header" Value="Hide Code"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </MenuItem.Style>
                                </MenuItem>
                            </ContextMenu>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="DetailsTemplate">
                        <Setter.Value>
                            <DataTemplate>
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="3" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <GroupBox Grid.Column="0" Header="Source Code Snippet" ToolTip="Source Code Snippet"
                                              Style="{StaticResource dataGridRowDetailsGroupBoxStyle}">
                                        
                                        <TextBlock TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" 
                                                   Text="{Binding Path=SourceCodeSnippet, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    </GroupBox>

                                    <GridSplitter Grid.Column="1" Width="3" HorizontalAlignment="Stretch" Style="{StaticResource vsGridSplitterStyle}"/>

                                    <GroupBox Grid.Column="2" Grid.ColumnSpan="2" Header="Reference Code Snippet" ToolTip="Reference Code Snippet"
                                              Style="{StaticResource dataGridRowDetailsGroupBoxStyle}">
                                        <TextBlock TextWrapping="NoWrap" TextTrimming="CharacterEllipsis" 
                                                   Text="{Binding Path=ReferenceCodeSnippet, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                    </GroupBox>
                                </Grid>
                            </DataTemplate>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <DataTrigger Binding="{Binding ElementName=gridRowVisibilityToggleButton, Path=IsChecked,
                                                       Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" 
                                     Value="True">
                            <Setter Property="Visibility" 
                                    Value="{Binding Path=IsThresholdExceeded, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                    Converter={StaticResource visibilityConverter}}"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </DataGrid.RowStyle>
            <DataGrid.Columns>
                <DataGridTextColumn Header="Source Name" Width="*" Binding="{Binding Path=SourceName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                     Visibility="{Binding Source={StaticResource proxyElement}, 
                                                          Path='DataContext.ColumnsVisibilityCollectionViewModel[Source Name].IsVisible', 
                                                          Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource visibilityConverter}}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}"/>

                <DataGridTextColumn Header="Source Location" Width="2*" Binding="{Binding Path=SourceLocation, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                     Visibility="{Binding Source={StaticResource proxyElement}, 
                                                          Path='DataContext.ColumnsVisibilityCollectionViewModel[Source Location].IsVisible', 
                                                          Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource visibilityConverter}}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource datagridCellStyle}">
                            <Setter Property="Tag" Value="{x:Static local:LocationType.Source}"/> 
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>

                <DataGridTextColumn Header="Reference Name" Width="*" Binding="{Binding Path=ReferenceName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}"
                                    Visibility="{Binding Source={StaticResource proxyElement}, 
                                                         Path='DataContext.ColumnsVisibilityCollectionViewModel[Reference Name].IsVisible', 
                                                         Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource visibilityConverter}}"/>

                <DataGridTextColumn Header="Reference Location" Width="2*" Binding="{Binding Path=ReferenceLocation, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                                    ElementStyle="{StaticResource cellTextBlockStyle}"
                                    Visibility="{Binding Source={StaticResource proxyElement}, 
                                                         Path='DataContext.ColumnsVisibilityCollectionViewModel[Reference Location].IsVisible', 
                                                         Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource visibilityConverter}}">
                    <DataGridTextColumn.CellStyle>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource datagridCellStyle}">
                            <Setter Property="Tag" Value="{x:Static local:LocationType.Reference}"/>
                        </Style>
                    </DataGridTextColumn.CellStyle>
                </DataGridTextColumn>

                <DataGridTemplateColumn Header="Similarity" Width="0.5*" SortMemberPath="Similarity"
                                        Visibility="{Binding Source={StaticResource proxyElement},
                                                             Path='DataContext.ColumnsVisibilityCollectionViewModel[Similarity].IsVisible', 
                                                             Mode=OneWay, UpdateSourceTrigger=PropertyChanged, Converter={StaticResource visibilityConverter}}">
                    <DataGridTemplateColumn.CellStyle>
                        <Style TargetType="DataGridCell" BasedOn="{StaticResource datagridCellStyle}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=IsThresholdExceeded, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Value="True">
                                    <Setter Property="ToolTip" Value="The copy paste thresh hold is exceeded!"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataGridTemplateColumn.CellStyle>
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch">
                                <Image Source="pack://application:,,,/AntiPlagiarism;component/Resources/StatusInvalid.ico"
                                       Style="{StaticResource vsImageStyle}" Margin="2" VerticalAlignment="Center"
                                       Visibility="{Binding Path=IsThresholdExceeded, Mode=OneWay, UpdateSourceTrigger=PropertyChanged,
                                                            Converter={StaticResource visibilityConverter}}"/>

                                <TextBlock Style="{StaticResource cellTextBlockStyle}" TextAlignment="Center" VerticalAlignment="Center" Margin="0,2"
                                           Text="{Binding Path=Similarity, Mode=OneWay, UpdateSourceTrigger=PropertyChanged, StringFormat={}{0:P1}}"/>
                            </StackPanel>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
